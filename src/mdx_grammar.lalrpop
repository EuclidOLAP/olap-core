use crate::mdx_tokens::{Token, LexicalError};
use crate::mdx_ast;
use crate::mdx_ast::AstFormulaObject;
use crate::mdx_ast::AstFormulaObject::{CustomFormulaMember/*,CustomFormulaSet*/};

use crate::mdx_ast::{AstFactory, AstTerm, AstExpression};
use crate::mdx_ast::AstFactory::{FactoryNum, FactoryStr, FactorySegs,FactoryTuple,FactoryExp};

use crate::mdx_ast::{AstMemberFunction, AstMemberFnParent};

grammar;

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "with" => Token::With,
    "member" => Token::Member,
    "set" => Token::Set,
    "as" => Token::As,

    "select" => Token::Select,
    "on" => Token::On,
    "from" => Token::From,
    "where" => Token::Where,
    "BracketedString" => Token::BracketedString(<String>),
    "QuotedString" => Token::QuotedString(<String>),

    "Columns" => Token::Columns,
    "Rows" => Token::Rows,
    "Pages" => Token::Pages,
    "Chapters" => Token::Chapters,
    "Sections" => Token::Sections,

    "+" => Token::Plus,
    "-" => Token::Minus,
    "*" => Token::Multiplied,
    "/" => Token::Divided,

    "," => Token::Comma,
    "&" => Token::Ampersand,
    "." => Token::Dot,
    "int" => Token::Integer(<u64>),
    "double" => Token::Double(<f64>),

    "(" => Token::RoundBracketLeft,
    ")" => Token::RoundBracketRight,
    "{" => Token::CurlyBraceLeft,
    "}" => Token::CurlyBraceRight,

    ";" => Token::Semicolon,

    "Parent" => Token::Parent,
  }
}


// multi-dimensional object segment
pub Seg: mdx_ast::AstSeg = {
  "&" <int:"int"> => {
    mdx_ast::AstSeg::Gid(int)
  },
  "&" <int:"int"> <bra_str:"BracketedString"> => {
    mdx_ast::AstSeg::GidStr(int, bra_str)
  },
  <bra_str:"BracketedString"> => {
    mdx_ast::AstSeg::Str(bra_str)
  },
  <mfn: MemberFunction> => {
    mdx_ast::AstSeg::MemberFunction(mfn)
  },
}

pub Segments: Vec<mdx_ast::AstSeg> = {
  <seg:Seg> => {
    let mut list = Vec::with_capacity(6);
    list.push(seg);
    list
  },
  <segs:Segments> "." <seg:Seg> => {
    let mut list = segs;
    list.push(seg);
    list
  }
}

pub SegmentsWrap: mdx_ast::AstSegments = {
  <segs:Segments> => {
    mdx_ast::AstSegments::Segs(segs)
  }
}

Tuple: Vec<mdx_ast::AstSegments> = {
  <sw:SegmentsWrap> => {
    vec![sw]
  },
  <tuple:Tuple> "," <sw:SegmentsWrap> => {
    let mut list = tuple;
    list.push(sw);
    list
  }
}

pub TupleWrap: mdx_ast::AstTuple = {
  "(" <tuple:Tuple> ")" => {
    mdx_ast::AstTuple::SegsList(tuple)
  }
}

pub TupleWrap_2: mdx_ast::AstTuple = {
  "(" <sw:SegmentsWrap> "," <tuple:Tuple> ")" => {
    let mut list = tuple; // Vec<mdx_ast::AstSegments>
    list.insert(0, sw); // mdx_ast::AstSegments
    mdx_ast::AstTuple::SegsList(list)
  }
}

Set: Vec<mdx_ast::AstTuple> = {
  <ast_tp:TupleWrap> => {
    vec![ast_tp]
  },
  <set:Set> "," <ast_tp:TupleWrap> => {
    let mut list = set;
    list.push(ast_tp);
    list
  }
}

pub SetWrap: mdx_ast::AstSet = {
  "{" <tuples:Set> "}" => {
    mdx_ast::AstSet::Tuples(tuples)
  }
}

// COLUMNS | ROWS | PAGES | CHAPTERS | SECTIONS | AXIS (<unsigned_integer>)
pub Axis: mdx_ast::AstAxis = {
  <ast_set:SetWrap> "on" <axpos:AxisPos> => {
    mdx_ast::AstAxis::SetDefinition {
      ast_set,
      pos: axpos,
    }
  }
}

AxisPos: u64 = {
  <axpos:"int"> => axpos,
  "Columns"     => 0,
  "Rows"        => 1,
  "Pages"       => 2,
  "Chapters"    => 3,
  "Sections"    => 4,
}

pub Axes: Vec<mdx_ast::AstAxis> = {
  <axis:Axis> => {
    vec![axis]
  },
  <axes:Axes> "," <axis:Axis> => {
    let mut list = axes;
    list.push(axis);
    list
  }
}

pub MdxStatement: mdx_ast::ExtMDXStatement = {
  "select" "on" "from" "where" => {
    mdx_ast::ExtMDXStatement::Querying { basic_cube: mdx_ast::AstCube{} }
  }
}

// AstSelectionStatement
pub SelectionMDX: mdx_ast::AstSelectionStatement = {
  "select" <axes:Axes> "from" <cube:Segments> (";")? => {
    mdx_ast::AstSelectionStatement {
      formula_objs: vec![],
      axes,
      cube,
      basic_slice: None,
    }
  },
  "select" <axes:Axes> "from" <cube:Segments> "where" <tuple:TupleWrap> (";")? => {
    mdx_ast::AstSelectionStatement {
      formula_objs: vec![],
      axes,
      cube,
      basic_slice: Some(tuple),
    }
  },
  "with" <cfos:CustomFormulaObjects> "select" <axes:Axes> "from" <cube:Segments> (";")? => {
    mdx_ast::AstSelectionStatement {
      formula_objs: cfos,
      axes,
      cube,
      basic_slice: None,
    }
  },
  "with" <cfos:CustomFormulaObjects> "select" <axes:Axes> "from" <cube:Segments> "where" <tuple:TupleWrap> (";")? => {
    mdx_ast::AstSelectionStatement {
      formula_objs: cfos,
      axes,
      cube,
      basic_slice: Some(tuple),
    }
  },
}

CustomFormulaObjects: Vec<AstFormulaObject> = {
  <fm:FormulaMember> => {
    vec![fm]
  },
  <fs:FormulaSet> => {
    vec![fs]
  },
  <cfos:CustomFormulaObjects> (",")? <fm:FormulaMember> => {
    let mut list = cfos;
    list.push(fm);
    list
  },
  <cfos:CustomFormulaObjects> (",")? <fs:FormulaSet> => {
    let mut list = cfos;
    list.push(fs);
    list
  }
}

FormulaMember: AstFormulaObject = {
  "member" <sw:SegmentsWrap> "as" <exp:Expression> => {
    CustomFormulaMember(sw, exp)
  }
}

FormulaSet: AstFormulaObject = {
  "set" <_sw:SegmentsWrap> "as" => {
    // CustomFormulaSet
    todo!("<<< MDX Grammar Exception >>> CustomFormulaSet not implemented yet.")
  }
}

Expression: AstExpression = {
  <term:Term> => {
    AstExpression {
      terms: vec![(' ', term)],
    }
  },
  <exp:Expression> "+" <term:Term> => {
    let mut e = exp;
    e.terms.push(('+', term));
    e
  },
  <exp:Expression> "-" <term:Term> => {
    let mut e = exp;
    e.terms.push(('-', term));
    e
  }
}

Term: AstTerm = {
  <factory:Factory> => {
    AstTerm {
      factories: vec![(' ', factory)],
    }
  },
  <term:Term> "*" <factory:Factory> => {
    let mut t = term;
    t.factories.push(('*', factory));
    t
  },
  <term:Term> "/" <factory:Factory> => {
    let mut t = term;
    t.factories.push(('/', factory));
    t
  }
}

Factory: AstFactory = {
  <value:"double"> => {
    FactoryNum(value)
  },
  <int_val:"int"> => {
    let double_val: f64 = int_val as f64;
    FactoryNum(double_val)
  },
  <str:"QuotedString"> => {
    FactoryStr(str)
  },
  <segs_wrap:SegmentsWrap> => {
    FactorySegs(segs_wrap)
  },
  <tuple_wrap:TupleWrap_2> => {
    FactoryTuple(tuple_wrap)
  },
  "(" <exp:Expression> ")" => {
    FactoryExp(exp)
  },
}

MemberFunction: AstMemberFunction = {
  <parent: MemberFnParent> => {
    AstMemberFunction::Parent(parent)
  },
}

MemberFnParent: AstMemberFnParent = {
  "Parent" => {
    AstMemberFnParent::NoParam
  },
  "Parent" "(" ")" => {
    AstMemberFnParent::NoParam
  },
  "Parent" "(" <segments: SegmentsWrap> ")" => {
    AstMemberFnParent::HasParam(segments)
  },
}
